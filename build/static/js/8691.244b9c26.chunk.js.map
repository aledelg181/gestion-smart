{"version":3,"file":"static/js/8691.244b9c26.chunk.js","mappings":"oMAWA,MAyDA,EAzD4BA,IAA4B,IAA3B,MAAEC,EAAK,KAAEC,EAAI,KAAEC,GAAMH,EAC9C,MAAMI,GAAQC,EAAAA,EAAAA,KAEd,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACN,MAAOA,GAAS,YAAaO,UAAU,OAAMC,UAClDC,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAACC,eAAa,EAAAH,SAAA,EACnBN,IACEG,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CACHC,UAAWC,EAAAA,EACXC,KAAMd,EACNe,OAAO,SACPC,IAAI,WACJC,KAAK,QACLC,MAAM,UACNC,SAAO,EACP,aAAW,qBAAoBZ,UAE/BC,EAAAA,EAAAA,MAAA,OAAKY,MAAM,MAAMC,OAAO,MAAMC,QAAQ,cAAcC,KAAK,OAAOC,MAAM,6BAA4BjB,SAAA,EAC9FC,EAAAA,EAAAA,MAAA,KAAGiB,SAAS,cAAalB,SAAA,EACrBH,EAAAA,EAAAA,KAAA,QACIsB,EAAE,oEACFH,KAAMrB,EAAMyB,QAAQC,QAAQ,QAEhCxB,EAAAA,EAAAA,KAAA,QACIsB,EAAE,8FACFH,KAAMrB,EAAMyB,QAAQC,QAAQC,QAEhCzB,EAAAA,EAAAA,KAAA,QAAMsB,EAAE,yDAAyDH,KAAMrB,EAAMyB,QAAQC,QAAQ,QAC7FxB,EAAAA,EAAAA,KAAA,QACIsB,EAAE,yHACFH,KAAMrB,EAAMyB,QAAQC,QAAQC,WAGpCzB,EAAAA,EAAAA,KAAA,QAAAG,UACIH,EAAAA,EAAAA,KAAA,YAAU0B,GAAG,QAAOvB,UAChBH,EAAAA,EAAAA,KAAA,QAAMgB,MAAM,MAAMC,OAAO,QAAQE,KAAK,QAAQQ,UAAU,gCAM3E9B,IACGG,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,UAAWC,EAAAA,EAAMC,KAAMd,EAAMe,OAAO,SAASE,KAAK,QAAQC,MAAM,UAAUC,SAAO,EAAC,aAAW,mBAAkBZ,SAClHN,QAIP,C,+HChDlB,MAAM+B,EAAUC,EAAAA,YACZ,CAAAnC,EAAuGoC,KAAS,IAA/G,SAAE3B,EAAQ,QAAE4B,EAAO,aAAEC,EAAY,UAAEC,EAAS,UAAEC,EAAS,GAAEC,EAAK,CAAC,EAAC,UAAEC,EAAY,CAAC,EAAC,MAAEzC,KAAU0C,GAAQ3C,EACjG,MAAMI,GAAQC,EAAAA,EAAAA,KAEd,OACIK,EAAAA,EAAAA,MAACkC,EAAAA,EAAI,CACDR,IAAKA,EACLK,GAAI,CACAI,OAAQ,YACRC,YAAoC,SAAvB1C,EAAMyB,QAAQkB,KAAkB3C,EAAMyB,QAAQmB,KAAKC,MAAQ,GAAK7C,EAAMyB,QAAQqB,KAAK,KAChG,SAAU,CACNC,UAAkC,SAAvB/C,EAAMyB,QAAQkB,KAAkB,qCAAuC,sCAEnFN,MAEHE,EAAMlC,SAAA,EAGR8B,GAAatC,IACXK,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CAACX,GAAI,CAAEY,EAAG,KAAOpD,OAAOK,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CAACC,QAAQ,KAAI9C,SAAER,IAAqBuD,OAAQhB,IAE7FD,GAAatC,IACVK,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CAACX,GAAI,CAAEY,EAAG,KAAOpD,OAAOK,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CAACC,QAAQ,KAAI9C,SAAER,IAAqBuD,OAAQhB,IAI7FvC,IACGK,EAAAA,EAAAA,KAACmD,EAAAA,EAAO,CACJhB,GAAI,CACAiB,QAAS,EACTZ,YAAoC,SAAvB1C,EAAMyB,QAAQkB,KAAkB3C,EAAMyB,QAAQmB,KAAKC,MAAQ,GAAK7C,EAAMyB,QAAQqB,KAAK,QAM3Gb,IACG/B,EAAAA,EAAAA,KAACqD,EAAAA,EAAW,CAAClB,GAAI,CAAEY,EAAG,OAAQX,GAAakB,UAAWtB,GAAgB,GAAG7B,SACpEA,KAGP4B,GAAW5B,IACV,IAgBnByB,EAAQ2B,aAAe,CACnBxB,SAAS,GAGb,S,uLC5De,SAASyB,IACpB,MAAM1D,GAAQC,EAAAA,EAAAA,KACd,OACIC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,iBAAgBQ,UAC3BC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAExD,SAAA,EACvBH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRd,GAAI,CACA2B,gBAAiBhE,EAAMyB,QAAQqB,KAAK,KACpC,UAAW,CACPkB,gBAAiBhE,EAAMyB,QAAQqB,KAAK,OAG5CmB,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,4BAA4B7D,SAC9D,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRnC,MAAM,UACNiD,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,yBAA0B,CAAEf,QAAS,YAAa9C,SACpF,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRnC,MAAM,UACNiD,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,0BAA2B,CAAEf,QAAS,YAAa9C,SACrF,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CAACZ,QAAQ,YAAYnC,MAAM,OAAOiD,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,uBAAwB,CAAEf,QAAS,SAAU9C,SAAC,YAI1HH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRnC,MAAM,QACNiD,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,wBAAyB,CAAEf,QAAS,UAAW9C,SACjF,gBAOrB,C,6HChDA,MAAM8D,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,EAAwB,MACxC,2BAA4B,CACxBE,SAAU,wBAIZC,GAAkBC,EAAAA,EAAAA,aAAW,CAACC,EAAOzC,KACvC,MAAM,cAAE0C,IAAkBC,EAAAA,EAAAA,OACnBC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GAEnCC,GAAoBC,EAAAA,EAAAA,cAAY,KAClCH,GAAaI,IAAeA,GAAU,GAEvC,IAEGC,GAAgBF,EAAAA,EAAAA,cAAY,KAC9BN,EAAcD,EAAM7C,GAAG,GACxB,CAAC6C,EAAM7C,GAAI8C,IAEd,OACIxE,EAAAA,EAAAA,KAACiE,EAAW,CAACnC,IAAKA,EAAI3B,UAClBC,EAAAA,EAAAA,MAACkC,EAAAA,EAAI,CAACH,GAAI,CAAE8C,QAAS,gBAAiBjE,MAAO,QAASb,SAAA,EAClDC,EAAAA,EAAAA,MAAC8E,EAAAA,EAAW,CAAC/C,GAAI,CAAEgD,QAAS,mBAAoBC,eAAgB,iBAAkBjF,SAAA,EAC9EH,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CAACC,QAAQ,YAAW9C,SAAEoE,EAAMc,WACvCjF,EAAAA,EAAAA,MAACkF,EAAAA,EAAG,CAACnD,GAAI,CAAEoD,WAAY,QAASpF,SAAA,EAC5BH,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CACP,aAAW,YACXrD,GAAI,CAAEY,EAAG,EAAG0C,WAAY,UAAW9D,UAAW+C,EAAW,iBAAmB,gBAC5EX,QAASc,EAAkB1E,UAE3BH,EAAAA,EAAAA,KAAC0F,EAAAA,EAA6B,OAElC1F,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CAACrD,GAAI,CAAEY,EAAG,EAAG0C,WAAY,WAAa1B,QAASiB,EAAc7E,UACpEH,EAAAA,EAAAA,KAAC2F,EAAAA,EAAiB,aAI9B3F,EAAAA,EAAAA,KAAC4F,EAAAA,EAAQ,CAACC,GAAInB,EAAUoB,QAAQ,OAAOC,eAAa,EAAA5F,UAChDC,EAAAA,EAAAA,MAAC4F,EAAAA,EAAK,CAAC7D,GAAI,CAAEgD,QAAS,EAAGc,oBAAqB,EAAGC,qBAAsB,EAAGjB,QAAS,mBAAoB9E,SAAA,EACnGH,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CAACmD,cAAY,EAAAhG,SAAC,eACzBH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHhD,KAAK,QACLuF,WAAWpG,EAAAA,EAAAA,KAACqG,EAAAA,EAAe,CAAClE,GAAI,CAAEmE,SAAU,MAC5CnE,GAAI,CAAE,UAAW,CAAE8C,QAAS,gBAAkB9E,SACjD,0BAMH,IAWP,SAASoG,IACpB,OACIvG,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,mBAAkBQ,UAC7BH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRuD,WAAS,EACTrE,GAAI,CAAEsE,iBAAkB,GACxB1C,QAASA,MACLC,EAAAA,EAAAA,IAAgB,yBAA0B,CACtC0C,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhB7E,QAASA,CAAC8E,EAAKxB,KAAYrF,EAAAA,EAAAA,KAACqE,EAAe,CAAC3C,GAAImF,EAAKxB,QAASA,KAChE,EACJlF,SACL,mBAKb,C,eCrFe,SAAS2G,IACpB,MAAOC,EAASC,IAAcpC,EAAAA,EAAAA,WAAS,GAOvC,OACIxE,EAAAA,EAAAA,MAACwB,EAAAA,EAAO,CAACjC,MAAM,QAAOQ,SAAA,EAClBH,EAAAA,EAAAA,KAACiH,EAAAA,EAAQ,CAACF,QAASA,EAASG,SAPdC,IAClBH,EAAWG,EAAMxG,OAAOoG,UACxBK,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,IAAa,CAAEC,MAAOH,EAAMxG,OAAOoG,UAAW,EAKCQ,WAAY,CAAE,aAAc,gBAAkB,iBAElGvH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CAACZ,QAAQ,WAAWuD,WAAS,EAACrE,GAAI,CAAEsE,iBAAkB,GAAK1C,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,0BAA0B7D,SAAC,oBAKxI,C,eCrBe,SAASqH,IACpB,MAAM,cAAEhD,IAAkBC,EAAAA,EAAAA,MAE1B,OACIzE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,2BAA0BQ,UACrCC,EAAAA,EAAAA,MAACqH,EAAAA,EAAK,CAACC,cAAc,MAAMtC,eAAe,gBAAejF,SAAA,EACrDH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRuD,WAAS,EACT1F,MAAM,QACNqB,GAAI,CAAEsE,iBAAkB,EAAGkB,gBAAiB,GAC5C5D,QAASA,KACLC,EAAAA,EAAAA,IAAgB,iBAAkB,CAC9Bf,QAAS,QACT2E,SAAS,EACTlB,aAAc,CAAEE,WAAY,SAAUD,SAAU,YAEvDxG,SACJ,8BAGDH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CAACZ,QAAQ,WAAWuD,WAAS,EAACrE,GAAI,CAAEsE,iBAAkB,GAAK1C,QAASA,IAAMS,IAAgBrE,SAAC,oBAMlH,C,eCzBe,SAAS0H,IACpB,MAAOC,EAAOC,IAAYnD,EAAAA,EAAAA,UAAS,GA6BnC,SAASoD,IACL,OAAc,KAAVF,EAAsB,UAClB,GAAEA,IACd,CAEA,OACI1H,EAAAA,EAAAA,MAACwB,EAAAA,EAAO,CAACjC,MAAM,gBAAeQ,SAAA,EAC1BH,EAAAA,EAAAA,KAACiI,EAAAA,GAAM,CACHH,MAAOA,EACPI,IAAK,EACLC,KAAM,EACNC,IAAK,GACLC,kBAAkB,KAClBC,MAlCE,CACV,CACIR,MAAO,GAEX,CACIA,MAAO,GAEX,CACIA,MAAO,GAEX,CACIA,MAAO,GAEX,CACIA,MAAO,GAEX,CACIA,MAAO,KAmBHS,iBAAkBP,EAElBA,iBAAkBA,EAClBd,SA7CSsB,CAACrB,EAAOsB,KACD,kBAAbA,GACPV,EAASU,EACb,KA4CIzI,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRuD,WAAS,EACTrE,GAAI,CAAEsE,iBAAkB,GACxB1C,QAASA,KACS,KAAV+D,GACA9D,EAAAA,EAAAA,IAAgB,yBAA0B,CAAE0E,iBAA0B,IAARZ,EAAc7E,QAAS,UAErFe,EAAAA,EAAAA,IAAgB,yBAA0B,CAAE4D,SAAS,EAAM3E,QAAS,QACxE,EACF9C,SACL,oBAKb,C,gDC/De,SAASwI,IACpB,MAAOb,EAAOC,IAAYnD,EAAAA,EAAAA,UAAS,cAKnC,OACIxE,EAAAA,EAAAA,MAACwB,EAAAA,EAAO,CAACjC,MAAM,aAAYQ,SAAA,EACvBH,EAAAA,EAAAA,KAAC4I,EAAAA,EAAW,CAAAzI,UACRC,EAAAA,EAAAA,MAACyI,EAAAA,EAAU,CACPC,KAAG,EACH,kBAAgB,qCAChBhB,MAAOA,EACPZ,SAXMC,IAClBY,EAASZ,EAAMxG,OAAOmH,MAAM,EAWhBiB,KAAK,0BAAyB5I,SAAA,EAE9BH,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,CAAClB,MAAM,aAAamB,SAASjJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,IAAKC,MAAM,iBAC/DnJ,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,CAAClB,MAAM,YAAYmB,SAASjJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,IAAKC,MAAM,gBAC9DnJ,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,CAAClB,MAAM,OAAOmB,SAASjJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,IAAKC,MAAM,eAGjEnJ,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRuD,WAAS,EACTrE,GAAI,CAAEsE,iBAAkB,GACxB1C,QAASA,MACLC,EAAAA,EAAAA,IAAgB,yBAA0B,CAAEf,QAAS,UACrDmE,EAAAA,EAAAA,KACIgC,EAAAA,EAAAA,IAAoB,CAChBC,YAAavB,IAEpB,EACH3H,SACL,oBAKb,C,0BCpCe,SAASmJ,IACpB,MAAMtI,EAAQ,CAAEoD,SAAU,QAEpBmF,GAAWC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMF,YACvCzB,EAAOC,IAAYnD,EAAAA,EAAAA,UAAS,GAWnC,OACIxE,EAAAA,EAAAA,MAACwB,EAAAA,EAAO,CAACjC,MAAM,oBAAmBQ,SAAA,EAC9BC,EAAAA,EAAAA,MAACqH,EAAAA,EAAK,CAACrC,eAAe,gBAAgBsC,cAAc,MAAKvH,SAAA,EACrDH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRpC,KAAK,QACLsB,GAAInB,EAEJ0I,SAAgC,IAAtBH,EAASI,SACnB5F,QAASA,IAAMgE,GAAU6B,GAASA,EAAO,IAAGzJ,UAE5CH,EAAAA,EAAAA,KAAC6J,EAAAA,EAAkB,OAEvBzJ,EAAAA,EAAAA,MAAC4C,EAAAA,EAAU,CAACC,QAAQ,QAAO9C,SAAA,CAAC,eAAa2H,MACzC9H,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRpC,KAAK,QACLsB,GAAInB,EAEJ0I,SAAgC,IAAtBH,EAASI,SACnB5F,QAASA,IAAMgE,GAAU6B,GAASA,EAAO,IAAGzJ,UAE5CH,EAAAA,EAAAA,KAAC8J,EAAAA,EAAe,UAGxB9J,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CAACZ,QAAQ,YAAYuD,WAAS,EAACrE,GAAI,CAAEsE,iBAAkB,GAAK1C,QAASA,MAjChFC,EAAAA,EAAAA,IAAgB,yBAA0B,CAAEf,QAAS,cACrDmE,EAAAA,EAAAA,KACI2C,EAAAA,EAAAA,IAAgB,CACZJ,SAAU7B,MA8BsF3H,SAAC,oBAKjH,CCpDe,SAAS6J,IACpB,OACIhK,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,cAAaQ,UACxBC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAExD,SAAA,EACvBH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,KACLC,EAAAA,EAAAA,IAAgB,2BAA4B,CACxC0C,aAAc,CACVC,SAAU,MACVC,WAAY,QAEhB3D,QAAS,SAEhB9C,SACJ,gBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,KACLC,EAAAA,EAAAA,IAAgB,yBAA0B,CACtC0C,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhB3D,QAAS,SAEhB9C,SACJ,kBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,KACLC,EAAAA,EAAAA,IAAgB,0BAA2B,CACvC0C,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhB3D,QAAS,SAEhB9C,SACJ,iBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,KACLC,EAAAA,EAAAA,IAAgB,uBAAwB,CACpC0C,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhB3D,QAAS,SAEhB9C,SACJ,mBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,KACLC,EAAAA,EAAAA,IAAgB,uBAAwB,CACpC0C,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhB3D,QAAS,SAEhB9C,SACJ,qBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,KACLC,EAAAA,EAAAA,IAAgB,uBAAwB,CACpC0C,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhB3D,QAAS,SAEhB9C,SACJ,uBAOrB,CCrGe,SAAS8J,IACpB,MAAOlD,EAASC,GAAcnF,EAAAA,UAAe,GAM7C,OACI7B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,oBAAmBQ,UAC9BC,EAAAA,EAAAA,MAACqH,EAAAA,EAAK,CAACC,cAAc,MAAMwC,IAAK,EAAG9E,eAAe,SAAS+E,WAAW,SAASC,SAAS,OAAMjK,SAAA,EAC1FH,EAAAA,EAAAA,KAACiH,EAAAA,EAAQ,CAACF,QAASA,EAASG,SAPbC,IACvBH,EAAWG,EAAMxG,OAAOoG,QAAQ,EAMiCQ,WAAY,CAAE,aAAc,gBAAkB,qBAEvGvH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRuD,WAAS,EACTrE,GAAI,CAAEsE,iBAAkB,GACxB1C,QAASA,KACLC,EAAAA,EAAAA,IAAgB,wBAAyB,CAErCqG,mBAAkBtD,EAClB9D,QAAS,SAEhB9C,SACJ,sBAMjB,CC/Be,SAASmK,IACpB,MAAM,cAAE9F,IAAkBC,EAAAA,EAAAA,MAkB1B,OACIzE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,cAAaQ,UACxBH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRuD,WAAS,EACTrE,GAAI,CAAEsE,iBAAkB,GACxB1C,QAASA,KAAMC,EAAAA,EAAAA,IAAgB,yBAA0B,CAAEd,OAAS2D,IAAQ0D,OAvBpEC,EAuB+E3D,GAtB/FzG,EAAAA,EAAAA,MAAAqK,EAAAA,SAAA,CAAAtK,SAAA,EACIH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,OACRc,QAASA,KAEL2G,MAAO,gCAA+BF,IAAa,EACrDrK,SACL,UAGDH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CAACZ,QAAQ,OAAOc,QAASA,IAAMS,EAAcgG,GAAYrK,SAAC,eAXrDqK,KAuBoF,IAAGrK,SAClG,mBAKb,C,gDC7Be,SAASwK,IACpB,MAAO7C,EAAOC,IAAYnD,EAAAA,EAAAA,UAAS,SA0BnC,OACIxE,EAAAA,EAAAA,MAACwB,EAAAA,EAAO,CAACjC,MAAM,YAAWQ,SAAA,EACtBH,EAAAA,EAAAA,KAAC4I,EAAAA,EAAW,CAAAzI,UACRC,EAAAA,EAAAA,MAACyI,EAAAA,EAAU,CACPC,KAAG,EACH,kBAAgB,qCAChBhB,MAAOA,EACPZ,SA/BMC,IAClBY,EAASZ,EAAMxG,OAAOmH,MAAM,EA+BhBiB,KAAK,0BAAyB5I,SAAA,EAE9BH,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,CAAClB,MAAM,QAAQmB,SAASjJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,IAAKC,MAAM,WAC1DnJ,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,CAAClB,MAAM,OAAOmB,SAASjJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,IAAKC,MAAM,UACzDnJ,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,CAAClB,MAAM,OAAOmB,SAASjJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,IAAKC,MAAM,UACzDnJ,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,CAAClB,MAAM,OAAOmB,SAASjJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,IAAKC,MAAM,eAGjEnJ,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CAACZ,QAAQ,YAAYuD,WAAS,EAACrE,GAAI,CAAEsE,iBAAkB,GAAK1C,QAASA,IApChE6G,MAChB,OAAQ9C,GACJ,IAAK,QAYL,SACI9D,EAAAA,EAAAA,IAAgB,yBAA0B,CAAE6G,oBAAqBC,EAAAA,EAAO7H,QAAS,SACjF,MAXJ,IAAK,QACDe,EAAAA,EAAAA,IAAgB,yBAA0B,CAAE6G,oBAAqBE,EAAAA,EAAM9H,QAAS,SAChF,MACJ,IAAK,QACDe,EAAAA,EAAAA,IAAgB,yBAA0B,CAAE6G,oBAAqBG,EAAAA,EAAM/H,QAAS,SAChF,MACJ,IAAK,QACDe,EAAAA,EAAAA,IAAgB,yBAA0B,CAAE6G,oBAAqBI,EAAAA,EAAMhI,QAAS,SAKxF,EAmBsF2H,GAAczK,SAAC,oBAK7G,CClCA,MAmiBA,EAniBmB+K,KACf,MAAMpL,GAAQC,EAAAA,EAAAA,KACRqH,GAAW+D,EAAAA,EAAAA,MAEjB,OACInL,EAAAA,EAAAA,KAACoL,EAAAA,EAAQ,CAACzL,MAAM,WAAWuC,WAAWlC,EAAAA,EAAAA,KAACqL,EAAAA,EAAe,CAACzL,KAAK,uDAAwDO,UAChHC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS2H,EAAAA,GAAYnL,SAAA,EACjCH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEtL,UAC5BH,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,iBAAgBQ,UAC3BC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGyB,eAAe,SAAS+E,WAAW,SAAQhK,SAAA,EACnEH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACT2I,OAAO,KAGlBzL,SACJ,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACH1B,GAAI,CACArB,MAAOhB,EAAMyB,QAAQsK,MAAMnJ,KAC3BF,YAAa1C,EAAMyB,QAAQsK,MAAMnJ,KACjC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQsK,MAAMpK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQsK,MAAMnJ,OAE7FO,QAAQ,WACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,wBACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,SAEX8K,OAAO,KAGlBzL,SACJ,aAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRd,GAAI,CACArB,MAAOhB,EAAMyB,QAAQwK,QAAQrJ,KAC7BF,YAAa1C,EAAMyB,QAAQwK,QAAQrJ,KACnC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQwK,QAAQtK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQwK,QAAQrJ,OAEjGqB,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,WAEX8K,OAAO,KAGlBzL,SACJ,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRd,GAAI,CACArB,MAAOhB,EAAMyB,QAAQyK,QAAQtJ,KAC7BF,YAAa1C,EAAMyB,QAAQyK,QAAQtJ,KACnC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQyK,QAAQvK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQyK,QAAQtJ,OAEjGqB,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,WAEX8K,OAAO,KAGlBzL,SACJ,sBAQjBH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEtL,UAC5BH,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,aAAYQ,UACvBC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGyB,eAAe,SAAS+E,WAAW,SAAQhK,SAAA,EACnEH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,WAGpB9C,SACJ,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACH1B,GAAI,CACArB,MAAOhB,EAAMyB,QAAQsK,MAAMnJ,KAC3BF,YAAa1C,EAAMyB,QAAQsK,MAAMnJ,KACjC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQsK,MAAMpK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQsK,MAAMnJ,OAE7FO,QAAQ,WACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,wBACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,YAItBX,SACJ,aAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRd,GAAI,CACArB,MAAOhB,EAAMyB,QAAQwK,QAAQrJ,KAC7BF,YAAa1C,EAAMyB,QAAQwK,QAAQrJ,KACnC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQwK,QAAQtK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQwK,QAAQrJ,OAEjGqB,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,cAItBX,SACJ,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRd,GAAI,CACArB,MAAOhB,EAAMyB,QAAQyK,QAAQtJ,KAC7BF,YAAa1C,EAAMyB,QAAQyK,QAAQtJ,KACnC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQyK,QAAQvK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQyK,QAAQtJ,OAEjGqB,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,cAItBX,SACJ,sBAQjBH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEtL,UAC5BH,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,sBAAqBQ,UAChCC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGyB,eAAe,SAAS+E,WAAW,SAAQhK,SAAA,EACnEH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACTgJ,cAAc,KAGzB9L,SACJ,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACH1B,GAAI,CACArB,MAAOhB,EAAMyB,QAAQsK,MAAMnJ,KAC3BF,YAAa1C,EAAMyB,QAAQsK,MAAMnJ,KACjC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQsK,MAAMpK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQsK,MAAMnJ,OAE7FO,QAAQ,WACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,wBACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,SAEXmL,cAAc,KAGzB9L,SACJ,aAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRd,GAAI,CACArB,MAAOhB,EAAMyB,QAAQwK,QAAQrJ,KAC7BF,YAAa1C,EAAMyB,QAAQwK,QAAQrJ,KACnC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQwK,QAAQtK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQwK,QAAQrJ,OAEjGqB,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,WAEXmL,cAAc,KAGzB9L,SACJ,eAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,WACRd,GAAI,CACArB,MAAOhB,EAAMyB,QAAQyK,QAAQtJ,KAC7BF,YAAa1C,EAAMyB,QAAQyK,QAAQtJ,KACnC,UAAW,CAAEoJ,WAAYhM,EAAMyB,QAAQyK,QAAQvK,KAAO,GAAIe,YAAa1C,EAAMyB,QAAQyK,QAAQtJ,OAEjGqB,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,0BACTpC,QAAS,QACTyH,MAAO,CACH5J,MAAO,WAEXmL,cAAc,KAGzB9L,SACJ,sBAQjBH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIE,GAAI,EAAEtL,UACrBH,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,oBAAmBQ,UAC9BC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGyB,eAAe,SAAQjF,SAAA,EAC/CH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNjF,aAAc,CAAEC,SAAU,MAAOC,WAAY,QAC7CvB,QAAS,kCAGpBlF,SACJ,gBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNjF,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CvB,QAAS,oCAGpBlF,SACJ,kBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNjF,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CvB,QAAS,mCAGpBlF,SACJ,iBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNjF,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDvB,QAAS,sCAGpBlF,SACJ,oBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNjF,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDvB,QAAS,uCAGpBlF,SACJ,qBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNjF,aAAc,CAAEC,SAAU,SAAUC,WAAY,QAChDvB,QAAS,qCAGpBlF,SACJ,0BAOjBH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIE,GAAI,EAAEtL,UACrBH,EAAAA,EAAAA,KAAC4B,EAAAA,EAAO,CAACjC,MAAM,qBAAoBQ,UAC/BC,EAAAA,EAAAA,MAACqD,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGyB,eAAe,SAAQjF,SAAA,EAC/CH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,2BACTI,WAAY,UAGvBtF,SACJ,oBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,iCACTI,WAAY,eAGvBtF,SACJ,kBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,+BACTI,WAAY,aAGvBtF,SACJ,gBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,kCACTI,WAAY,gBAGvBtF,SACJ,mBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,iCACTI,WAAY,eAGvBtF,SACJ,kBAILH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAAzD,UACNH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,CACHZ,QAAQ,YACRc,QAASA,IACLqD,GACIsE,EAAAA,EAAAA,IAAa,CACTC,MAAM,EACNtG,QAAS,2BACTI,WAAY,UAGvBtF,SACJ,mBAOjBH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAGpL,UACdH,EAAAA,EAAAA,KAACgD,EAAAA,EAAU,CAACC,QAAQ,KAAKd,GAAI,CAAE+J,GAAI,GAAI/L,SAAC,4BAI5CH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAACwD,EAAa,OAElBxD,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAACsJ,EAAW,OAEhBtJ,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAAC2I,EAAY,OAEjB3I,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAAC6H,EAAY,OAEjB7H,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAACsK,EAAc,OAEnBtK,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAACwH,EAAe,OAEpBxH,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAACiK,EAAgB,OAErBjK,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAAC2K,EAAa,OAElB3K,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAAC8G,EAAK,OAEV9G,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAACuG,EAAe,OAEpBvG,EAAAA,EAAAA,KAACyD,EAAAA,GAAI,CAACG,MAAI,EAAC2H,GAAI,GAAIY,GAAI,EAAEhM,UACrBH,EAAAA,EAAAA,KAACgK,EAAmB,UAGrB,C,sBCvjBfoC,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFrL,EAAG,wCACD,eACJgL,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFrL,EAAG,yHACD,eACJgL,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFrL,EAAG,kHACD,iBACJgL,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFrL,EAAG,4DACD,6BACJgL,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFrL,EAAG,sBACD,kBACJgL,EAAQ,EAAUG,C,0ICJlB,SAAeG,EAAAA,EAAAA,IAA4B5M,EAAAA,EAAAA,KAAK,OAAQ,CACtDsB,EAAG,+FACD,wBCFJ,GAAesL,EAAAA,EAAAA,IAA4B5M,EAAAA,EAAAA,KAAK,OAAQ,CACtDsB,EAAG,wIACD,YCFJ,GAAesL,EAAAA,EAAAA,IAA4B5M,EAAAA,EAAAA,KAAK,OAAQ,CACtDsB,EAAG,kGACD,yB,qECTG,SAASuL,EAAwBC,GACtC,OAAOC,EAAAA,EAAAA,IAAqB,cAAeD,EAC7C,CACA,MACA,GADwBE,EAAAA,EAAAA,GAAuB,cAAe,CAAC,OAAQ,UAAW,WAAY,gBAAiB,eAAgB,iBAAkB,YAAa,eCDxJC,EAAY,CAAC,cAAe,QAAS,OAAQ,gBAAiB,oBAAqB,aAAc,OAAQ,aA6BzGC,GAAehJ,EAAAA,EAAAA,IAAOiJ,EAAAA,EAAY,CACtCC,kBAAmBC,IAAQC,EAAAA,EAAAA,GAAsBD,IAAkB,YAATA,EAC1DtE,KAAM,cACN+D,KAAM,OACNS,kBAAmBA,CAAChJ,EAAOiJ,KACzB,MAAM,WACJC,GACElJ,EACJ,MAAO,CAACiJ,EAAOE,KAAMD,EAAWE,eAAiBH,EAAOG,cAAeH,EAAQ,QAAMI,EAAAA,EAAAA,GAAWH,EAAW5M,SAA+B,YAArB4M,EAAW3M,OAAuB0M,EAAQ,SAAOI,EAAAA,EAAAA,GAAWH,EAAW3M,UAAU,GARrLoD,EAUlBxE,IAAA,IAAC,MACFI,EAAK,WACL2N,GACD/N,EAAA,OAAKmO,EAAAA,EAAAA,GAAS,CACb/M,OAAQhB,EAAMgO,MAAQhO,GAAOyB,QAAQwM,KAAK7L,YACxCuL,EAAWnN,eAAiB,CAC9B,UAAW,CACTwD,gBAAiBhE,EAAMgO,KAAQ,QAA4B,YAArBL,EAAW3M,MAAsBhB,EAAMgO,KAAKvM,QAAQ2B,OAAO8K,cAAgBlO,EAAMgO,KAAKvM,QAAQkM,EAAW3M,OAAOmN,iBAAiBnO,EAAMgO,KAAKvM,QAAQ2B,OAAOgL,iBAAkBC,EAAAA,EAAAA,IAA2B,YAArBV,EAAW3M,MAAsBhB,EAAMyB,QAAQ2B,OAAOkL,OAAStO,EAAMyB,QAAQkM,EAAW3M,OAAOW,KAAM3B,EAAMyB,QAAQ2B,OAAOgL,cAEnV,uBAAwB,CACtBpK,gBAAiB,iBAGC,YAArB2J,EAAW3M,OAAuB,CACnC,CAAE,KAAIuN,EAAgBtH,cAAcsH,EAAgBV,iBAAkB,CACpE7M,OAAQhB,EAAMgO,MAAQhO,GAAOyB,QAAQkM,EAAW3M,OAAOW,MAEzD,CAAE,KAAI4M,EAAgB3E,YAAa,CACjC5I,OAAQhB,EAAMgO,MAAQhO,GAAOyB,QAAQ2B,OAAOwG,WAE9C,IACI4E,GAAkCtO,EAAAA,EAAAA,KAAKuO,EAAc,CAAC,GACtDC,GAA2BxO,EAAAA,EAAAA,KAAKyO,EAA0B,CAAC,GAC3DC,GAAwC1O,EAAAA,EAAAA,KAAK2O,EAA2B,CAAC,GAiJ/E,EAhJ8B9M,EAAAA,YAAiB,SAAkB+M,EAAS9M,GACxE,IAAI+M,EAAsBC,EAC1B,MAAMvK,GAAQwK,EAAAA,EAAAA,GAAgB,CAC5BxK,MAAOqK,EACP7F,KAAM,iBAEF,YACFiG,EAAcV,EAAkB,MAChCxN,EAAQ,UACRjB,KAAMoP,EAAWT,EAAW,cAC5Bb,GAAgB,EAChBuB,kBAAmBC,EAAwBT,EAAwB,WACnEnH,EAAU,KACV1G,EAAO,SAAQ,UACfyC,GACEiB,EACJ6K,GAAQC,EAAAA,EAAAA,GAA8B9K,EAAO0I,GACzCpN,EAAO8N,EAAgBwB,EAAwBF,EAC/CC,EAAoBvB,EAAgBwB,EAAwBH,EAC5DvB,GAAaI,EAAAA,EAAAA,GAAS,CAAC,EAAGtJ,EAAO,CACrCzD,QACA6M,gBACA9M,SAEIyO,EAvEkB7B,KACxB,MAAM,QACJ6B,EAAO,cACP3B,EAAa,MACb7M,EAAK,KACLD,GACE4M,EACE8B,EAAQ,CACZ7B,KAAM,CAAC,OAAQC,GAAiB,gBAAkB,SAAOC,EAAAA,EAAAA,GAAW9M,KAAW,QAAM8M,EAAAA,EAAAA,GAAW/M,OAE5F2O,GAAkBC,EAAAA,EAAAA,GAAeF,EAAO1C,EAAyByC,GACvE,OAAOzB,EAAAA,EAAAA,GAAS,CAAC,EAAGyB,EAASE,EAAgB,EA4D7BE,CAAkBjC,GAClC,OAAoBzN,EAAAA,EAAAA,KAAKkN,GAAcW,EAAAA,EAAAA,GAAS,CAC9C8B,KAAM,WACNpI,YAAYsG,EAAAA,EAAAA,GAAS,CACnB,qBAAsBF,GACrBpG,GACH1H,KAAmBgC,EAAAA,aAAmBhC,EAAM,CAC1CyG,SAA0D,OAA/CuI,EAAuBhP,EAAK0E,MAAM+B,UAAoBuI,EAAuBhO,IAE1FmO,YAA0BnN,EAAAA,aAAmBqN,EAAmB,CAC9D5I,SAAwE,OAA7DwI,EAAwBI,EAAkB3K,MAAM+B,UAAoBwI,EAAwBjO,IAEzG4M,WAAYA,EACZ3L,IAAKA,EACLwB,WAAWsM,EAAAA,EAAAA,GAAKN,EAAQ5B,KAAMpK,IAC7B8L,EAAO,CACRE,QAASA,IAEb,G","sources":["ui-component/cards/CardSecondaryAction.js","ui-component/cards/SubCard.js","ui-component/extended/notistack/ColorVariants.js","ui-component/extended/notistack/CustomComponent.js","ui-component/extended/notistack/Dense.js","ui-component/extended/notistack/DismissSnackBar.js","ui-component/extended/notistack/HideDuration.js","ui-component/extended/notistack/IconVariants.js","ui-component/extended/notistack/MaxSnackbar.js","ui-component/extended/notistack/PositioningSnackbar.js","ui-component/extended/notistack/PreventDuplicate.js","ui-component/extended/notistack/SnackBarAction.js","ui-component/extended/notistack/TransitionBar.js","views/ui-elements/advance/UISnackbar.js","../node_modules/@mui/icons-material/AddOutlined.js","../node_modules/@mui/icons-material/CheckCircle.js","../node_modules/@mui/icons-material/CloseOutlined.js","../node_modules/@mui/icons-material/KeyboardArrowDownOutlined.js","../node_modules/@mui/icons-material/RemoveOutlined.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { ButtonBase, Link, Tooltip } from '@mui/material';\n\n// project imports\nimport Avatar from '../extended/Avatar';\n\n// ==============================|| CARD SECONDARY ACTION ||============================== //\n\nconst CardSecondaryAction = ({ title, link, icon }) => {\n    const theme = useTheme();\n\n    return (\n        <Tooltip title={title || 'Reference'} placement=\"left\">\n            <ButtonBase disableRipple>\n                {!icon && (\n                    <Avatar\n                        component={Link}\n                        href={link}\n                        target=\"_blank\"\n                        alt=\"MUI Logo\"\n                        size=\"badge\"\n                        color=\"primary\"\n                        outline\n                        aria-label=\"'ui material icon'\"\n                    >\n                        <svg width=\"500\" height=\"500\" viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <g clipPath=\"url(#clip0)\">\n                                <path\n                                    d=\"M100 260.9V131L212.5 195.95V239.25L137.5 195.95V282.55L100 260.9Z\"\n                                    fill={theme.palette.primary[800]}\n                                />\n                                <path\n                                    d=\"M212.5 195.95L325 131V260.9L250 304.2L212.5 282.55L287.5 239.25V195.95L212.5 239.25V195.95Z\"\n                                    fill={theme.palette.primary.main}\n                                />\n                                <path d=\"M212.5 282.55V325.85L287.5 369.15V325.85L212.5 282.55Z\" fill={theme.palette.primary[800]} />\n                                <path\n                                    d=\"M287.5 369.15L400 304.2V217.6L362.5 239.25V282.55L287.5 325.85V369.15ZM362.5 195.95V152.65L400 131V174.3L362.5 195.95Z\"\n                                    fill={theme.palette.primary.main}\n                                />\n                            </g>\n                            <defs>\n                                <clipPath id=\"clip0\">\n                                    <rect width=\"300\" height=\"238.3\" fill=\"white\" transform=\"translate(100 131)\" />\n                                </clipPath>\n                            </defs>\n                        </svg>\n                    </Avatar>\n                )}\n                {icon && (\n                    <Avatar component={Link} href={link} target=\"_blank\" size=\"badge\" color=\"primary\" outline aria-label=\"ui material icon\">\n                        {icon}\n                    </Avatar>\n                )}\n            </ButtonBase>\n        </Tooltip>\n    );\n};\n\nCardSecondaryAction.propTypes = {\n    icon: PropTypes.node,\n    link: PropTypes.string,\n    title: PropTypes.string\n};\n\nexport default CardSecondaryAction;\n","import PropTypes from 'prop-types';\n\nimport React from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\n\n// ==============================|| CUSTOM SUB CARD ||============================== //\n\nconst SubCard = React.forwardRef(\n    ({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\n        const theme = useTheme();\n\n        return (\n            <Card\n                ref={ref}\n                sx={{\n                    border: '1px solid',\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.grey[200],\n                    ':hover': {\n                        boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\n                    },\n                    ...sx\n                }}\n                {...others}\n            >\n                {/* card header and action */}\n                {!darkTitle && title && (\n                    <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />\n                )}\n                {darkTitle && title && (\n                    <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />\n                )}\n\n                {/* content & header divider */}\n                {title && (\n                    <Divider\n                        sx={{\n                            opacity: 1,\n                            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.grey[200]\n                        }}\n                    />\n                )}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        );\n    }\n);\n\nSubCard.propTypes = {\n    children: PropTypes.node,\n    content: PropTypes.bool,\n    contentClass: PropTypes.string,\n    darkTitle: PropTypes.bool,\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    sx: PropTypes.object,\n    contentSX: PropTypes.object,\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nSubCard.defaultProps = {\n    content: true\n};\n\nexport default SubCard;\n","// material-ul\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Grid } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// ==============================|| NOTISTACK - COLOR VARIANTS ||============================== //\n\nexport default function ColorVariants() {\n    const theme = useTheme();\n    return (\n        <SubCard title=\"Color Variants\">\n            <Grid container spacing={2}>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        sx={{\n                            backgroundColor: theme.palette.grey[900],\n                            '&:hover': {\n                                backgroundColor: theme.palette.grey[700]\n                            }\n                        }}\n                        onClick={() => enqueueSnackbar('This is default message.')}\n                    >\n                        Default\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        color=\"success\"\n                        onClick={() => enqueueSnackbar('his is success message', { variant: 'success' })}\n                    >\n                        Success\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        color=\"warning\"\n                        onClick={() => enqueueSnackbar('This is warning message', { variant: 'warning' })}\n                    >\n                        Warning\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button variant=\"contained\" color=\"info\" onClick={() => enqueueSnackbar('This is info message', { variant: 'info' })}>\n                        Info\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        color=\"error\"\n                        onClick={() => enqueueSnackbar('This is error message', { variant: 'error' })}\n                    >\n                        Error\n                    </Button>\n                </Grid>\n            </Grid>\n        </SubCard>\n    );\n}\n","import PropTypes from 'prop-types';\nimport { useState, forwardRef, useCallback } from 'react';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Card, Typography, CardActions, IconButton, Collapse, Paper } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar, useSnackbar, SnackbarContent } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// assets\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\nimport KeyboardArrowDownOutlinedIcon from '@mui/icons-material/KeyboardArrowDownOutlined';\n\nconst SnackbarBox = styled(SnackbarContent)(() => ({\n    '@media (min-width:600px)': {\n        minWidth: '344px !important'\n    }\n}));\n\nconst CustomNotistack = forwardRef((props, ref) => {\n    const { closeSnackbar } = useSnackbar();\n    const [expanded, setExpanded] = useState(false);\n\n    const handleExpandClick = useCallback(() => {\n        setExpanded((prevState) => !prevState);\n        // eslint-disable-next-line\n    }, []);\n\n    const handleDismiss = useCallback(() => {\n        closeSnackbar(props.id);\n    }, [props.id, closeSnackbar]);\n\n    return (\n        <SnackbarBox ref={ref}>\n            <Card sx={{ bgcolor: 'warning.light', width: '100%' }}>\n                <CardActions sx={{ padding: '8px 8px 8px 16px', justifyContent: 'space-between' }}>\n                    <Typography variant=\"subtitle2\">{props.message}</Typography>\n                    <Box sx={{ marginLeft: 'auto' }}>\n                        <IconButton\n                            aria-label=\"Show more\"\n                            sx={{ p: 1, transition: 'all .2s', transform: expanded ? 'rotate(180deg)' : 'rotate(0deg)' }}\n                            onClick={handleExpandClick}\n                        >\n                            <KeyboardArrowDownOutlinedIcon />\n                        </IconButton>\n                        <IconButton sx={{ p: 1, transition: 'all .2s' }} onClick={handleDismiss}>\n                            <CloseOutlinedIcon />\n                        </IconButton>\n                    </Box>\n                </CardActions>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <Paper sx={{ padding: 2, borderTopLeftRadius: 0, borderTopRightRadius: 0, bgcolor: 'warning.lighter' }}>\n                        <Typography gutterBottom>PDF ready</Typography>\n                        <Button\n                            size=\"small\"\n                            startIcon={<CheckCircleIcon sx={{ fontSize: 16 }} />}\n                            sx={{ '&:hover': { bgcolor: 'transparent' } }}\n                        >\n                            Download now\n                        </Button>\n                    </Paper>\n                </Collapse>\n            </Card>\n        </SnackbarBox>\n    );\n});\n\nCustomNotistack.propTypes = {\n    id: PropTypes.number,\n    message: PropTypes.string\n};\n\n// ==============================|| NOTISTACK - CUSTOM STYLE ||============================== //\n\nexport default function CustomComponent() {\n    return (\n        <SubCard title=\"Custom Component\">\n            <Button\n                variant=\"outlined\"\n                fullWidth\n                sx={{ marginBlockStart: 2 }}\n                onClick={() => {\n                    enqueueSnackbar(\"You're report is ready\", {\n                        anchorOrigin: {\n                            vertical: 'bottom',\n                            horizontal: 'right'\n                        },\n                        content: (key, message) => <CustomNotistack id={key} message={message} />\n                    });\n                }}\n            >\n                Show snackbar\n            </Button>\n        </SubCard>\n    );\n}\n","import { useState } from 'react';\n\n// material-ul\nimport { Button, Checkbox } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\nimport { handlerDense } from 'store/slices/snackbar';\nimport { dispatch } from 'store';\n\n// ==============================|| NOTISTACK - DENSE ||============================== //\n\nexport default function Dense() {\n    const [checked, setChecked] = useState(false);\n\n    const handleChange = (event) => {\n        setChecked(event.target.checked);\n        dispatch(handlerDense({ dense: event.target.checked }));\n    };\n\n    return (\n        <SubCard title=\"Dense\">\n            <Checkbox checked={checked} onChange={handleChange} inputProps={{ 'aria-label': 'controlled' }} />\n            Dense margins\n            <Button variant=\"outlined\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => enqueueSnackbar('Your notification here')}>\n                Show snackbar\n            </Button>\n        </SubCard>\n    );\n}\n","// material-ul\nimport { Button, Stack } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar, useSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// ==============================|| NOTISTACK - DISMISS ||============================== //\n\nexport default function DismissSnackBar() {\n    const { closeSnackbar } = useSnackbar();\n\n    return (\n        <SubCard title=\"Dismiss Programmatically\">\n            <Stack flexDirection=\"row\" justifyContent=\"space-between\">\n                <Button\n                    variant=\"outlined\"\n                    fullWidth\n                    color=\"error\"\n                    sx={{ marginBlockStart: 2, marginInlineEnd: 2 }}\n                    onClick={() =>\n                        enqueueSnackbar('No connection!', {\n                            variant: 'error',\n                            persist: true,\n                            anchorOrigin: { horizontal: 'center', vertical: 'bottom' }\n                        })\n                    }\n                >\n                    Simulate connection loss\n                </Button>\n                <Button variant=\"outlined\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => closeSnackbar()}>\n                    Back Online\n                </Button>\n            </Stack>\n        </SubCard>\n    );\n}\n","import { useState } from 'react';\n\n// material-ul\nimport { Button, Slider } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// ==============================|| NOTISTACK - TIMEOUT ||============================== //\n\nexport default function HideDuration() {\n    const [value, setValue] = useState(1);\n\n    const handleChange = (event, newValue) => {\n        if (typeof newValue === 'number') {\n            setValue(newValue);\n        }\n    };\n\n    const marks = [\n        {\n            value: 1\n        },\n        {\n            value: 3\n        },\n        {\n            value: 5\n        },\n        {\n            value: 7\n        },\n        {\n            value: 9\n        },\n        {\n            value: 11\n        }\n    ];\n\n    function valueLabelFormat() {\n        if (value === 11) return `persist`;\n        return `${value}s`;\n    }\n\n    return (\n        <SubCard title=\"Hide Duration\">\n            <Slider\n                value={value}\n                min={1}\n                step={2}\n                max={11}\n                valueLabelDisplay=\"on\"\n                marks={marks}\n                // eslint-disable-next-line\n                getAriaValueText={valueLabelFormat}\n                // eslint-disable-next-line\n                valueLabelFormat={valueLabelFormat}\n                onChange={handleChange}\n            />\n            <Button\n                variant=\"contained\"\n                fullWidth\n                sx={{ marginBlockStart: 2 }}\n                onClick={() => {\n                    if (value !== 11) {\n                        enqueueSnackbar('Your notification here', { autoHideDuration: value * 1000, variant: 'info' });\n                    } else {\n                        enqueueSnackbar('Your notification here', { persist: true, variant: 'info' });\n                    }\n                }}\n            >\n                Show Snackbar\n            </Button>\n        </SubCard>\n    );\n}\n","import { useState } from 'react';\n\n// material-ul\nimport { Button, FormControl, Radio, FormControlLabel, RadioGroup } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\nimport { dispatch } from 'store';\nimport { handlerIconVariants } from 'store/slices/snackbar';\n\n// ==============================|| NOTISTACK - CUSTOM ICON ||============================== //\n\nexport default function IconVariants() {\n    const [value, setValue] = useState('usedefault');\n    const handleChange = (event) => {\n        setValue(event.target.value);\n    };\n\n    return (\n        <SubCard title=\"With Icons\">\n            <FormControl>\n                <RadioGroup\n                    row\n                    aria-labelledby=\"demo-row-radio-buttons-group-label\"\n                    value={value}\n                    onChange={handleChange}\n                    name=\"row-radio-buttons-group\"\n                >\n                    <FormControlLabel value=\"usedefault\" control={<Radio />} label=\"Use Default\" />\n                    <FormControlLabel value=\"useemojis\" control={<Radio />} label=\"Use Emojis\" />\n                    <FormControlLabel value=\"hide\" control={<Radio />} label=\"Hide\" />\n                </RadioGroup>\n            </FormControl>\n            <Button\n                variant=\"contained\"\n                fullWidth\n                sx={{ marginBlockStart: 2 }}\n                onClick={() => {\n                    enqueueSnackbar('Your notification here', { variant: 'info' });\n                    dispatch(\n                        handlerIconVariants({\n                            iconVariant: value\n                        })\n                    );\n                }}\n            >\n                Show Snackbar\n            </Button>\n        </SubCard>\n    );\n}\n","import { useState } from 'react';\n\n// material-ul\nimport { Button, Typography, Stack } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\nimport { dispatch, useSelector } from 'store';\nimport { handlerIncrease } from 'store/slices/snackbar';\n\n// asset\nimport RemoveOutlinedIcon from '@mui/icons-material/RemoveOutlined';\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\n// ==============================|| NOTISTACK - MAXIMUM SNACKBAR ||============================== //\n\nexport default function MaxSnackbar() {\n    const width = { minWidth: 'auto' };\n\n    const snackbar = useSelector((state) => state.snackbar);\n    const [value, setValue] = useState(3);\n\n    const handlerMaxStack = () => {\n        enqueueSnackbar('Your notification here', { variant: 'info' });\n        dispatch(\n            handlerIncrease({\n                maxStack: value\n            })\n        );\n    };\n\n    return (\n        <SubCard title=\"Maximum snackbars\">\n            <Stack justifyContent=\"space-between\" flexDirection=\"row\">\n                <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    sx={width}\n                    // eslint-disable-next-line\n                    disabled={snackbar.maxStack === 0 ? true : false}\n                    onClick={() => setValue((prev) => prev - 1)}\n                >\n                    <RemoveOutlinedIcon />\n                </Button>\n                <Typography variant=\"body1\">stack up to {value}</Typography>\n                <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    sx={width}\n                    // eslint-disable-next-line\n                    disabled={snackbar.maxStack === 4 ? true : false}\n                    onClick={() => setValue((prev) => prev + 1)}\n                >\n                    <AddOutlinedIcon />\n                </Button>\n            </Stack>\n            <Button variant=\"contained\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => handlerMaxStack()}>\n                Show Snackbar\n            </Button>\n        </SubCard>\n    );\n}\n","// material-ul\nimport { Button, Grid } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// ==============================|| NOTISTACK - POSTIONING ||============================== //\n\nexport default function PositioningSnackbar() {\n    return (\n        <SubCard title=\"Positioning\">\n            <Grid container spacing={2}>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() =>\n                            enqueueSnackbar('This is default message.', {\n                                anchorOrigin: {\n                                    vertical: 'top',\n                                    horizontal: 'left'\n                                },\n                                variant: 'info'\n                            })\n                        }\n                    >\n                        Top-Left\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() =>\n                            enqueueSnackbar('his is success message', {\n                                anchorOrigin: {\n                                    vertical: 'top',\n                                    horizontal: 'center'\n                                },\n                                variant: 'info'\n                            })\n                        }\n                    >\n                        Top-Center\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() =>\n                            enqueueSnackbar('This is warning message', {\n                                anchorOrigin: {\n                                    vertical: 'top',\n                                    horizontal: 'right'\n                                },\n                                variant: 'info'\n                            })\n                        }\n                    >\n                        Top-right\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() =>\n                            enqueueSnackbar('This is info message', {\n                                anchorOrigin: {\n                                    vertical: 'bottom',\n                                    horizontal: 'left'\n                                },\n                                variant: 'info'\n                            })\n                        }\n                    >\n                        Bottom-left\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() =>\n                            enqueueSnackbar('This is info message', {\n                                anchorOrigin: {\n                                    vertical: 'bottom',\n                                    horizontal: 'center'\n                                },\n                                variant: 'info'\n                            })\n                        }\n                    >\n                        Bottom-center\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() =>\n                            enqueueSnackbar('This is info message', {\n                                anchorOrigin: {\n                                    vertical: 'bottom',\n                                    horizontal: 'right'\n                                },\n                                variant: 'info'\n                            })\n                        }\n                    >\n                        Bottom-Right\n                    </Button>\n                </Grid>\n            </Grid>\n        </SubCard>\n    );\n}\n","import React from 'react';\n\n// material-ul\nimport { Button, Stack, Checkbox } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// ==============================|| NOTISTACK - PREVENT DUPLICATE ||============================== //\n\nexport default function PreventDuplicate() {\n    const [checked, setChecked] = React.useState(true);\n\n    const handleChangeCheck = (event) => {\n        setChecked(event.target.checked);\n    };\n\n    return (\n        <SubCard title=\"Prevent Duplicate\">\n            <Stack flexDirection=\"row\" gap={1} justifyContent=\"center\" alignItems=\"center\" flexWrap=\"wrap\">\n                <Checkbox checked={checked} onChange={handleChangeCheck} inputProps={{ 'aria-label': 'controlled' }} />\n                Prevent duplicate\n                <Button\n                    variant=\"outlined\"\n                    fullWidth\n                    sx={{ marginBlockStart: 2 }}\n                    onClick={() =>\n                        enqueueSnackbar('You only see me once.', {\n                            // eslint-disable-next-line\n                            preventDuplicate: checked ? true : false,\n                            variant: 'info'\n                        })\n                    }\n                >\n                    Show snackbar\n                </Button>\n            </Stack>\n        </SubCard>\n    );\n}\n","// material-ui\nimport { Button } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar, useSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// ==============================|| NOTISTACK - ACTION BUTTONS ||============================== //\n\nexport default function SnackBarAction() {\n    const { closeSnackbar } = useSnackbar();\n    const actionTask = (snackbarId) => (\n        <>\n            <Button\n                variant=\"text\"\n                onClick={() => {\n                    // eslint-disable-next-line\n                    alert(`I belong to snackbar with id ${snackbarId}`);\n                }}\n            >\n                Undo\n            </Button>\n            <Button variant=\"text\" onClick={() => closeSnackbar(snackbarId)}>\n                Dismiss\n            </Button>\n        </>\n    );\n\n    return (\n        <SubCard title=\"With Action\">\n            <Button\n                variant=\"contained\"\n                fullWidth\n                sx={{ marginBlockStart: 2 }}\n                onClick={() => enqueueSnackbar('Your notification here', { action: (key) => actionTask(key) })}\n            >\n                Show Snackbar\n            </Button>\n        </SubCard>\n    );\n}\n","import { useState } from 'react';\n\n// material-ul\nimport { Button, FormControl, Radio, FormControlLabel, RadioGroup, Grow, Slide, Fade, Zoom } from '@mui/material';\n\n// third-party\nimport { enqueueSnackbar } from 'notistack';\n\n// project import\nimport SubCard from 'ui-component/cards/SubCard';\n\n// ==============================|| NOTISTACK - TRANSITIONS ||============================== //\n\nexport default function TransitionBar() {\n    const [value, setValue] = useState('slide');\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n    };\n\n    const handleClick = () => {\n        switch (value) {\n            case 'slide':\n                enqueueSnackbar('Your notification here', { TransitionComponent: Slide, variant: 'info' });\n                break;\n            case 'grow':\n                enqueueSnackbar('Your notification here', { TransitionComponent: Grow, variant: 'info' });\n                break;\n            case 'fade':\n                enqueueSnackbar('Your notification here', { TransitionComponent: Fade, variant: 'info' });\n                break;\n            case 'zoom':\n                enqueueSnackbar('Your notification here', { TransitionComponent: Zoom, variant: 'info' });\n                break;\n            default:\n                enqueueSnackbar('Your notification here', { TransitionComponent: Slide, variant: 'info' });\n                break;\n        }\n    };\n\n    return (\n        <SubCard title=\"Animation\">\n            <FormControl>\n                <RadioGroup\n                    row\n                    aria-labelledby=\"demo-row-radio-buttons-group-label\"\n                    value={value}\n                    onChange={handleChange}\n                    name=\"row-radio-buttons-group\"\n                >\n                    <FormControlLabel value=\"slide\" control={<Radio />} label=\"Slide\" />\n                    <FormControlLabel value=\"grow\" control={<Radio />} label=\"Grow\" />\n                    <FormControlLabel value=\"fade\" control={<Radio />} label=\"Fade\" />\n                    <FormControlLabel value=\"zoom\" control={<Radio />} label=\"Zoom\" />\n                </RadioGroup>\n            </FormControl>\n            <Button variant=\"contained\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => handleClick()}>\n                Show Snackbar\n            </Button>\n        </SubCard>\n    );\n}\n","// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Grid, Typography } from '@mui/material';\n\n// project imports\nimport SubCard from 'ui-component/cards/SubCard';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { useDispatch } from 'store';\nimport { gridSpacing } from 'store/constant';\nimport { openSnackbar } from 'store/slices/snackbar';\nimport {\n    ColorVariants,\n    CustomComponent,\n    Dense,\n    DismissSnackBar,\n    HideDuration,\n    IconVariants,\n    MaxSnackbar,\n    PositioningSnackbar,\n    PreventDuplicate,\n    SnackBarAction,\n    TransitionBar\n} from 'ui-component/extended/notistack';\n\n// ==============================|| UI SNACKBAR ||============================== //\n\nconst UISnackbar = () => {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n\n    return (\n        <MainCard title=\"Snackbar\" secondary={<SecondaryAction link=\"https://next.material-ui.com/components/snackbars/\" />}>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12} sm={6} md={4}>\n                    <SubCard title=\"Basic Snackbar\">\n                        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is default message',\n                                                variant: 'alert',\n                                                close: false\n                                            })\n                                        )\n                                    }\n                                >\n                                    Default\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    sx={{\n                                        color: theme.palette.error.dark,\n                                        borderColor: theme.palette.error.dark,\n                                        '&:hover': { background: theme.palette.error.main + 20, borderColor: theme.palette.error.dark }\n                                    }}\n                                    variant=\"outlined\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is error message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'error'\n                                                },\n                                                close: false\n                                            })\n                                        )\n                                    }\n                                >\n                                    Error\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    sx={{\n                                        color: theme.palette.success.dark,\n                                        borderColor: theme.palette.success.dark,\n                                        '&:hover': { background: theme.palette.success.main + 20, borderColor: theme.palette.success.dark }\n                                    }}\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is success message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'success'\n                                                },\n                                                close: false\n                                            })\n                                        )\n                                    }\n                                >\n                                    Success\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    sx={{\n                                        color: theme.palette.warning.dark,\n                                        borderColor: theme.palette.warning.dark,\n                                        '&:hover': { background: theme.palette.warning.main + 20, borderColor: theme.palette.warning.dark }\n                                    }}\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is warning message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'warning'\n                                                },\n                                                close: false\n                                            })\n                                        )\n                                    }\n                                >\n                                    Warning\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </SubCard>\n                </Grid>\n\n                <Grid item xs={12} sm={6} md={4}>\n                    <SubCard title=\"With Close\">\n                        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is default message',\n                                                variant: 'alert'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Default\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    sx={{\n                                        color: theme.palette.error.dark,\n                                        borderColor: theme.palette.error.dark,\n                                        '&:hover': { background: theme.palette.error.main + 20, borderColor: theme.palette.error.dark }\n                                    }}\n                                    variant=\"outlined\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is error message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'error'\n                                                }\n                                            })\n                                        )\n                                    }\n                                >\n                                    Error\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    sx={{\n                                        color: theme.palette.success.dark,\n                                        borderColor: theme.palette.success.dark,\n                                        '&:hover': { background: theme.palette.success.main + 20, borderColor: theme.palette.success.dark }\n                                    }}\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is success message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'success'\n                                                }\n                                            })\n                                        )\n                                    }\n                                >\n                                    Success\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    sx={{\n                                        color: theme.palette.warning.dark,\n                                        borderColor: theme.palette.warning.dark,\n                                        '&:hover': { background: theme.palette.warning.main + 20, borderColor: theme.palette.warning.dark }\n                                    }}\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is warning message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'warning'\n                                                }\n                                            })\n                                        )\n                                    }\n                                >\n                                    Warning\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </SubCard>\n                </Grid>\n\n                <Grid item xs={12} sm={6} md={4}>\n                    <SubCard title=\"With Close + Action\">\n                        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is default message',\n                                                variant: 'alert',\n                                                actionButton: true\n                                            })\n                                        )\n                                    }\n                                >\n                                    Default\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    sx={{\n                                        color: theme.palette.error.dark,\n                                        borderColor: theme.palette.error.dark,\n                                        '&:hover': { background: theme.palette.error.main + 20, borderColor: theme.palette.error.dark }\n                                    }}\n                                    variant=\"outlined\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is error message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'error'\n                                                },\n                                                actionButton: true\n                                            })\n                                        )\n                                    }\n                                >\n                                    Error\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    sx={{\n                                        color: theme.palette.success.dark,\n                                        borderColor: theme.palette.success.dark,\n                                        '&:hover': { background: theme.palette.success.main + 20, borderColor: theme.palette.success.dark }\n                                    }}\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is success message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'success'\n                                                },\n                                                actionButton: true\n                                            })\n                                        )\n                                    }\n                                >\n                                    Success\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    sx={{\n                                        color: theme.palette.warning.dark,\n                                        borderColor: theme.palette.warning.dark,\n                                        '&:hover': { background: theme.palette.warning.main + 20, borderColor: theme.palette.warning.dark }\n                                    }}\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is warning message',\n                                                variant: 'alert',\n                                                alert: {\n                                                    color: 'warning'\n                                                },\n                                                actionButton: true\n                                            })\n                                        )\n                                    }\n                                >\n                                    Warning\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </SubCard>\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                    <SubCard title=\"Snackbar Position\">\n                        <Grid container spacing={2} justifyContent=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                anchorOrigin: { vertical: 'top', horizontal: 'left' },\n                                                message: 'This is an top-left message!'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Top-Left\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                anchorOrigin: { vertical: 'top', horizontal: 'center' },\n                                                message: 'This is an top-center message!'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Top-Center\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                anchorOrigin: { vertical: 'top', horizontal: 'right' },\n                                                message: 'This is an top-right message!'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Top-Right\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n                                                message: 'This is an bottom-right message!'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Bottom-Right\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                anchorOrigin: { vertical: 'bottom', horizontal: 'center' },\n                                                message: 'This is an bottom-center message!'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Bottom-Center\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n                                                message: 'This is an bottom-left message!'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Bottom-Left\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </SubCard>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <SubCard title=\"Snackbar Trasition\">\n                        <Grid container spacing={2} justifyContent=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is an fade message!',\n                                                transition: 'Fade'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Default/Fade\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is an slide-left message!',\n                                                transition: 'SlideLeft'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Slide Left\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is an slide-up message!',\n                                                transition: 'SlideUp'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Slide Up\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is an slide-right message!',\n                                                transition: 'SlideRight'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Slide Right\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is an slide-down message!',\n                                                transition: 'SlideDown'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Slide Down\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            openSnackbar({\n                                                open: true,\n                                                message: 'This is an grow message!',\n                                                transition: 'Grow'\n                                            })\n                                        )\n                                    }\n                                >\n                                    Grow\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </SubCard>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant=\"h5\" sx={{ mt: 2 }}>\n                        Extended - Notistack\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <ColorVariants />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <MaxSnackbar />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <IconVariants />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <HideDuration />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <SnackBarAction />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <DismissSnackBar />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <PreventDuplicate />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <TransitionBar />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <Dense />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <CustomComponent />\n                </Grid>\n                <Grid item xs={12} lg={6}>\n                    <PositioningSnackbar />\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default UISnackbar;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'AddOutlined');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckCircle');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"\n}), 'CloseOutlined');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\n}), 'KeyboardArrowDownOutlined');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'RemoveOutlined');\nexports.default = _default;","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;"],"names":["_ref","title","link","icon","theme","useTheme","_jsx","Tooltip","placement","children","_jsxs","ButtonBase","disableRipple","Avatar","component","Link","href","target","alt","size","color","outline","width","height","viewBox","fill","xmlns","clipPath","d","palette","primary","main","id","transform","SubCard","React","ref","content","contentClass","darkTitle","secondary","sx","contentSX","others","Card","border","borderColor","mode","dark","light","grey","boxShadow","CardHeader","p","Typography","variant","action","Divider","opacity","CardContent","className","defaultProps","ColorVariants","Grid","container","spacing","item","Button","backgroundColor","onClick","enqueueSnackbar","SnackbarBox","styled","SnackbarContent","minWidth","CustomNotistack","forwardRef","props","closeSnackbar","useSnackbar","expanded","setExpanded","useState","handleExpandClick","useCallback","prevState","handleDismiss","bgcolor","CardActions","padding","justifyContent","message","Box","marginLeft","IconButton","transition","KeyboardArrowDownOutlinedIcon","CloseOutlinedIcon","Collapse","in","timeout","unmountOnExit","Paper","borderTopLeftRadius","borderTopRightRadius","gutterBottom","startIcon","CheckCircleIcon","fontSize","CustomComponent","fullWidth","marginBlockStart","anchorOrigin","vertical","horizontal","key","Dense","checked","setChecked","Checkbox","onChange","event","dispatch","handlerDense","dense","inputProps","DismissSnackBar","Stack","flexDirection","marginInlineEnd","persist","HideDuration","value","setValue","valueLabelFormat","Slider","min","step","max","valueLabelDisplay","marks","getAriaValueText","handleChange","newValue","autoHideDuration","IconVariants","FormControl","RadioGroup","row","name","FormControlLabel","control","Radio","label","handlerIconVariants","iconVariant","MaxSnackbar","snackbar","useSelector","state","disabled","maxStack","prev","RemoveOutlinedIcon","AddOutlinedIcon","handlerIncrease","PositioningSnackbar","PreventDuplicate","gap","alignItems","flexWrap","preventDuplicate","SnackBarAction","actionTask","snackbarId","_Fragment","alert","TransitionBar","handleClick","TransitionComponent","Slide","Grow","Fade","Zoom","UISnackbar","useDispatch","MainCard","SecondaryAction","gridSpacing","xs","sm","md","openSnackbar","open","close","error","background","success","warning","actionButton","mt","lg","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","createSvgIcon","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CheckboxRoot","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","styles","ownerState","root","indeterminate","capitalize","_extends","vars","text","activeChannel","mainChannel","hoverOpacity","alpha","active","checkboxClasses","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","inProps","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","checkedIcon","iconProp","indeterminateIcon","indeterminateIconProp","other","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","type","clsx"],"sourceRoot":""}