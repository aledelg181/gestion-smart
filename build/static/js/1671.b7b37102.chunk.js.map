{"version":3,"file":"static/js/1671.b7b37102.chunk.js","mappings":"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","sources":["ui-component/cards/SubCard.js","views/application/chat/AvatarStatus.js","views/application/chat/UserDetails.js","views/application/chat/UserAvatar.js","views/application/chat/UserList.js","views/application/chat/ChatDrawer.js","views/application/chat/ChartHistory.js","views/application/chat/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport React from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\n\n// ==============================|| CUSTOM SUB CARD ||============================== //\n\nconst SubCard = React.forwardRef(\n    ({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\n        const theme = useTheme();\n\n        return (\n            <Card\n                ref={ref}\n                sx={{\n                    border: '1px solid',\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.grey[200],\n                    ':hover': {\n                        boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\n                    },\n                    ...sx\n                }}\n                {...others}\n            >\n                {/* card header and action */}\n                {!darkTitle && title && (\n                    <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />\n                )}\n                {darkTitle && title && (\n                    <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />\n                )}\n\n                {/* content & header divider */}\n                {title && (\n                    <Divider\n                        sx={{\n                            opacity: 1,\n                            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.grey[200]\n                        }}\n                    />\n                )}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        );\n    }\n);\n\nSubCard.propTypes = {\n    children: PropTypes.node,\n    content: PropTypes.bool,\n    contentClass: PropTypes.string,\n    darkTitle: PropTypes.bool,\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    sx: PropTypes.object,\n    contentSX: PropTypes.object,\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nSubCard.defaultProps = {\n    content: true\n};\n\nexport default SubCard;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// assets\nimport FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';\n\n// ==============================|| AVATAR STATUS ICONS ||============================== //\n\nconst AvatarStatus = ({ status, mr }) => {\n    const theme = useTheme();\n    switch (status) {\n        case 'available':\n            return (\n                <FiberManualRecordIcon\n                    sx={{\n                        cursor: 'pointer',\n                        color: theme.palette.success.dark,\n                        verticalAlign: 'middle',\n                        fontSize: '0.875rem',\n                        mr\n                    }}\n                />\n            );\n\n        case 'do_not_disturb':\n            return (\n                <FiberManualRecordIcon\n                    sx={{\n                        cursor: 'pointer',\n                        color: theme.palette.warning.dark,\n                        verticalAlign: 'middle',\n                        fontSize: '0.875rem',\n                        mr\n                    }}\n                />\n            );\n\n        case 'offline':\n            return (\n                <FiberManualRecordIcon\n                    sx={{\n                        cursor: 'pointer',\n                        color: theme.palette.error.dark,\n                        verticalAlign: 'middle',\n                        fontSize: '0.875rem',\n                        mr\n                    }}\n                />\n            );\n\n        default:\n            return null;\n    }\n};\n\nAvatarStatus.propTypes = {\n    status: PropTypes.string,\n    mr: PropTypes.number\n};\n\nexport default AvatarStatus;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Avatar, Card, CardContent, CardMedia, Divider, Grid, Typography } from '@mui/material';\n\n// project imports\nimport AvatarStatus from './AvatarStatus';\nimport SubCard from 'ui-component/cards/SubCard';\nimport { gridSpacing } from 'store/constant';\n\n// assets\nimport PinDropTwoToneIcon from '@mui/icons-material/PinDropTwoTone';\nimport PhoneTwoToneIcon from '@mui/icons-material/PhoneTwoTone';\nimport EmailTwoToneIcon from '@mui/icons-material/EmailTwoTone';\n\nimport images1 from 'assets/images/pages/img-catalog1.png';\nimport images2 from 'assets/images/pages/img-catalog2.png';\nimport images3 from 'assets/images/pages/img-catalog3.png';\n\nconst avatarImage = require.context('assets/images/users', true);\n\n// ==============================|| USER PROFILE / DETAILS ||============================== //\n\nconst UserDetails = ({ user }) => {\n    const theme = useTheme();\n\n    return (\n        <Grid container spacing={gridSpacing} sx={{ width: '100%', maxWidth: 300 }}>\n            <Grid item xs={12}>\n                <Card>\n                    <CardContent\n                        sx={{\n                            textAlign: 'center',\n                            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light\n                        }}\n                    >\n                        <Grid container spacing={1}>\n                            <Grid item xs={12}>\n                                <Avatar\n                                    alt={user.name}\n                                    src={user.avatar && avatarImage(`./${user.avatar}`)}\n                                    sx={{\n                                        m: '0 auto',\n                                        width: 130,\n                                        height: 130,\n                                        border: '1px solid',\n                                        borderColor: theme.palette.primary.main,\n                                        p: 1,\n                                        bgcolor: 'transparent'\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <AvatarStatus status={user.online_status} />\n                                <Typography variant=\"caption\" component=\"div\">\n                                    {user?.online_status.replaceAll('_', ' ')}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography variant=\"h5\" component=\"div\">\n                                    {user.name}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography variant=\"body2\" component=\"div\">\n                                    {user.role}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={12}>\n                <SubCard\n                    sx={{\n                        background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n                    }}\n                >\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h5\" component=\"div\">\n                                Information\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container spacing={1}>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"body2\">\n                                        <PinDropTwoToneIcon sx={{ verticalAlign: 'sub', fontSize: '1.125rem', mr: 0.625 }} /> 32188 Sips\n                                        Parkways, U.S\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"body2\">\n                                        <PhoneTwoToneIcon sx={{ verticalAlign: 'sub', fontSize: '1.125rem', mr: 0.625 }} /> 995-250-1803\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"body2\">\n                                        <EmailTwoToneIcon sx={{ verticalAlign: 'sub', fontSize: '1.125rem', mr: 0.625 }} />{' '}\n                                        O’Keefe@codedtheme.com\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Divider />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h5\" component=\"div\">\n                                Attachment\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container spacing={1}>\n                                <Grid item xs={12}>\n                                    <Grid container spacing={1}>\n                                        <Grid item>\n                                            <CardMedia component=\"img\" image={images1} title=\"image\" sx={{ width: 42, height: 42 }} />\n                                        </Grid>\n                                        <Grid item xs zeroMinWidth>\n                                            <Grid container spacing={0}>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"h6\">File Name.jpg</Typography>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"caption\">4/16/2021 07:47:03</Typography>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Grid container spacing={1}>\n                                        <Grid item>\n                                            <CardMedia component=\"img\" image={images2} title=\"image\" sx={{ width: 42, height: 42 }} />\n                                        </Grid>\n                                        <Grid item xs zeroMinWidth>\n                                            <Grid container spacing={0}>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"h6\">File Name.ai</Typography>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"caption\">4/16/2021 07:47:03</Typography>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Grid container spacing={1}>\n                                        <Grid item>\n                                            <CardMedia component=\"img\" image={images3} title=\"image\" sx={{ width: 42, height: 42 }} />\n                                        </Grid>\n                                        <Grid item xs zeroMinWidth>\n                                            <Grid container spacing={0}>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"h6\">File Name.pdf</Typography>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"caption\">4/16/2021 07:47:03</Typography>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nUserDetails.propTypes = {\n    user: PropTypes.object\n};\n\nexport default UserDetails;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { Avatar, Badge } from '@mui/material';\n\n// project imports\nimport AvatarStatus from './AvatarStatus';\n\n// assets\nconst avatarImage = require.context('assets/images/users', true);\n\n// ==============================|| CHAT USER AVATAR WITH STATUS ICON ||============================== //\n\nconst UserAvatar = ({ user }) => (\n    <Badge\n        overlap=\"circular\"\n        badgeContent={<AvatarStatus status={user.online_status} />}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'right'\n        }}\n    >\n        <Avatar alt={user.name} src={user.avatar && avatarImage(`./${user.avatar}`)} />\n    </Badge>\n);\n\nUserAvatar.propTypes = {\n    user: PropTypes.object\n};\n\nexport default UserAvatar;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState, Fragment } from 'react';\n\n// material-ui\nimport { Chip, Divider, Grid, List, ListItemButton, ListItemAvatar, ListItemText, Typography } from '@mui/material';\n\n// project imports\nimport UserAvatar from './UserAvatar';\n\nimport { useDispatch, useSelector } from 'store';\nimport { getUsers } from 'store/slices/chat';\n\n// ==============================|| CHAT USER LIST ||============================== //\n\nconst UserList = ({ setUser }) => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState([]);\n    const { users } = useSelector((state) => state.chat);\n\n    useEffect(() => {\n        dispatch(getUsers());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        setData(users);\n    }, [users]);\n\n    return (\n        <List component=\"nav\">\n            {data.map((user) => (\n                <Fragment key={user.id}>\n                    <ListItemButton\n                        onClick={() => {\n                            setUser(user);\n                        }}\n                    >\n                        <ListItemAvatar>\n                            <UserAvatar user={user} />\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={\n                                <Grid container alignItems=\"center\" spacing={1} component=\"span\">\n                                    <Grid item xs zeroMinWidth component=\"span\">\n                                        <Typography\n                                            variant=\"h5\"\n                                            color=\"inherit\"\n                                            component=\"span\"\n                                            sx={{\n                                                overflow: 'hidden',\n                                                textOverflow: 'ellipsis',\n                                                whiteSpace: 'nowrap',\n                                                display: 'block'\n                                            }}\n                                        >\n                                            {user.name}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item component=\"span\">\n                                        <Typography component=\"span\" variant=\"subtitle2\">\n                                            {user.lastMessage}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            }\n                            secondary={\n                                <Grid container alignItems=\"center\" spacing={1} component=\"span\">\n                                    <Grid item xs zeroMinWidth component=\"span\">\n                                        <Typography\n                                            variant=\"caption\"\n                                            component=\"span\"\n                                            sx={{\n                                                overflow: 'hidden',\n                                                textOverflow: 'ellipsis',\n                                                whiteSpace: 'nowrap',\n                                                display: 'block'\n                                            }}\n                                        >\n                                            {user.status}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item component=\"span\">\n                                        {user.unReadChatCount !== 0 && (\n                                            <Chip\n                                                label={user.unReadChatCount}\n                                                component=\"span\"\n                                                color=\"secondary\"\n                                                sx={{\n                                                    width: 20,\n                                                    height: 20,\n                                                    '& .MuiChip-label': {\n                                                        px: 0.5\n                                                    }\n                                                }}\n                                            />\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            }\n                        />\n                    </ListItemButton>\n                    <Divider />\n                </Fragment>\n            ))}\n        </List>\n    );\n};\n\nUserList.propTypes = {\n    setUser: PropTypes.func\n};\n\nexport default UserList;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Box, Drawer, Grid, IconButton, InputAdornment, Menu, MenuItem, OutlinedInput, Typography, useMediaQuery } from '@mui/material';\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\n// project imports\nimport UserList from './UserList';\nimport AvatarStatus from './AvatarStatus';\nimport UserAvatar from './UserAvatar';\nimport useAuth from 'hooks/useAuth';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { appDrawerWidth as drawerWidth, gridSpacing } from 'store/constant';\n\n// assets\nimport SearchTwoToneIcon from '@mui/icons-material/SearchTwoTone';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport useConfig from 'hooks/useConfig';\n\n// ==============================|| CHAT DRAWER ||============================== //\n\nconst ChatDrawer = ({ handleDrawerOpen, openChatDrawer, setUser }) => {\n    const theme = useTheme();\n\n    const { user } = useAuth();\n    const { borderRadius } = useConfig();\n    const matchDownLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n    // show menu to set current user status\n    const [anchorEl, setAnchorEl] = useState();\n    const handleClickRightMenu = (event) => {\n        setAnchorEl(event?.currentTarget);\n    };\n\n    const handleCloseRightMenu = () => {\n        setAnchorEl(null);\n    };\n\n    // set user status on status menu click\n    const [status, setStatus] = useState('available');\n    const handleRightMenuItemClick = (userStatus) => () => {\n        setStatus(userStatus);\n        handleCloseRightMenu();\n    };\n\n    const drawerBG = theme.palette.mode === 'dark' ? 'dark.main' : 'grey.50';\n\n    return (\n        <Drawer\n            sx={{\n                width: drawerWidth,\n                flexShrink: 0,\n                zIndex: { xs: 1100, lg: 0 },\n                '& .MuiDrawer-paper': {\n                    height: matchDownLG ? '100%' : 'auto',\n                    width: drawerWidth,\n                    boxSizing: 'border-box',\n                    position: 'relative',\n                    border: 'none',\n                    borderRadius: matchDownLG ? 'none' : `${borderRadius}px`\n                }\n            }}\n            variant={matchDownLG ? 'temporary' : 'persistent'}\n            anchor=\"left\"\n            open={openChatDrawer}\n            ModalProps={{ keepMounted: true }}\n            onClose={handleDrawerOpen}\n        >\n            {openChatDrawer && (\n                <MainCard\n                    sx={{\n                        bgcolor: matchDownLG ? 'transparent' : drawerBG\n                    }}\n                    border={!matchDownLG}\n                    content={false}\n                >\n                    <Box sx={{ p: 3, pb: 2 }}>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12}>\n                                <Grid container spacing={2} alignItems=\"center\" sx={{ flexWrap: 'nowrap' }}>\n                                    <Grid item>\n                                        <UserAvatar user={{ online_status: status, avatar: 'avatar-5.png', name: 'User 1' }} />\n                                    </Grid>\n                                    <Grid item xs zeroMinWidth>\n                                        <Typography align=\"left\" variant=\"h4\">\n                                            {user?.name}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <IconButton onClick={handleClickRightMenu} size=\"large\" aria-label=\"user status options\">\n                                            <ExpandMoreIcon />\n                                        </IconButton>\n                                        <Menu\n                                            id=\"simple-menu\"\n                                            anchorEl={anchorEl}\n                                            keepMounted\n                                            open={Boolean(anchorEl)}\n                                            onClose={handleCloseRightMenu}\n                                            anchorOrigin={{\n                                                vertical: 'bottom',\n                                                horizontal: 'right'\n                                            }}\n                                            transformOrigin={{\n                                                vertical: 'top',\n                                                horizontal: 'right'\n                                            }}\n                                        >\n                                            <MenuItem onClick={handleRightMenuItemClick('available')}>\n                                                <AvatarStatus status=\"available\" mr={1} />\n                                                Available\n                                            </MenuItem>\n                                            <MenuItem onClick={handleRightMenuItemClick('do_not_disturb')}>\n                                                <AvatarStatus status=\"do_not_disturb\" mr={1} />\n                                                Do not disturb\n                                            </MenuItem>\n                                            <MenuItem onClick={handleRightMenuItemClick('offline')}>\n                                                <AvatarStatus status=\"offline\" mr={1} />\n                                                Offline\n                                            </MenuItem>\n                                        </Menu>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <OutlinedInput\n                                    fullWidth\n                                    id=\"input-search-header\"\n                                    placeholder=\"Search Mail\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\">\n                                            <SearchTwoToneIcon fontSize=\"small\" />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <PerfectScrollbar\n                        style={{\n                            overflowX: 'hidden',\n                            height: matchDownLG ? 'calc(100vh - 190px)' : 'calc(100vh - 445px)',\n                            minHeight: matchDownLG ? 0 : 520\n                        }}\n                    >\n                        <Box sx={{ p: 3, pt: 0 }}>\n                            <UserList setUser={setUser} />\n                        </Box>\n                    </PerfectScrollbar>\n                </MainCard>\n            )}\n        </Drawer>\n    );\n};\n\nChatDrawer.propTypes = {\n    handleDrawerOpen: PropTypes.func,\n    openChatDrawer: PropTypes.bool,\n    setUser: PropTypes.func\n};\n\nexport default ChatDrawer;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\n// material-ui\nimport { Card, CardContent, Grid, Typography } from '@mui/material';\n\n// project imports\nimport { gridSpacing } from 'store/constant';\n\n// ==============================|| CHAT MESSAGE HISTORY ||============================== //\n\nconst ChartHistory = ({ data, theme, user }) => (\n    <Grid item xs={12}>\n        <Grid container spacing={gridSpacing}>\n            {data.map((history, index) => (\n                <React.Fragment key={index}>\n                    {history.from !== user.name ? (\n                        <Grid item xs={12}>\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={2} />\n                                <Grid item xs={10}>\n                                    <Card\n                                        sx={{\n                                            display: 'inline-block',\n                                            float: 'right',\n                                            bgcolor: theme.palette.mode === 'dark' ? 'grey.600' : theme.palette.primary.light\n                                        }}\n                                    >\n                                        <CardContent sx={{ p: 2, pb: '16px !important', width: 'fit-content', ml: 'auto' }}>\n                                            <Grid container spacing={1}>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"body2\" color={theme.palette.mode === 'dark' ? 'dark.900' : ''}>\n                                                        {history.text}\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <Typography\n                                                        align=\"right\"\n                                                        variant=\"subtitle2\"\n                                                        color={theme.palette.mode === 'dark' ? 'dark.900' : ''}\n                                                    >\n                                                        {history.time}\n                                                    </Typography>\n                                                </Grid>\n                                            </Grid>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Grid item xs={12}>\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={12} sm={7}>\n                                    <Card\n                                        sx={{\n                                            display: 'inline-block',\n                                            float: 'left',\n                                            background:\n                                                theme.palette.mode === 'dark' ? theme.palette.dark[900] : theme.palette.secondary.light\n                                        }}\n                                    >\n                                        <CardContent sx={{ p: 2, pb: '16px !important' }}>\n                                            <Grid container spacing={1}>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"body2\">{history.text}</Typography>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <Typography align=\"right\" variant=\"subtitle2\">\n                                                        {history.time}\n                                                    </Typography>\n                                                </Grid>\n                                            </Grid>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    )}\n                </React.Fragment>\n            ))}\n        </Grid>\n    </Grid>\n);\n\nChartHistory.propTypes = {\n    theme: PropTypes.object,\n    data: PropTypes.array,\n    user: PropTypes.object\n};\n\nexport default ChartHistory;\n","import React, { useEffect, useState, useLayoutEffect, useRef } from 'react';\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles';\nimport {\n    Box,\n    CardContent,\n    ClickAwayListener,\n    Divider,\n    Grid,\n    InputAdornment,\n    IconButton,\n    Menu,\n    MenuItem,\n    Popper,\n    OutlinedInput,\n    Typography,\n    useMediaQuery\n} from '@mui/material';\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport EmojiPicker, { SkinTones } from 'emoji-picker-react';\n\n// project imports\nimport UserDetails from './UserDetails';\nimport ChatDrawer from './ChatDrawer';\nimport ChartHistory from './ChartHistory';\nimport AvatarStatus from './AvatarStatus';\n\nimport Loader from 'ui-component/Loader';\nimport MainCard from 'ui-component/cards/MainCard';\nimport Avatar from 'ui-component/extended/Avatar';\n\nimport { useDispatch, useSelector } from 'store';\nimport { getUser, getUserChats, insertChat } from 'store/slices/chat';\nimport { appDrawerWidth as drawerWidth, gridSpacing } from 'store/constant';\n\n// assets\nimport AttachmentTwoToneIcon from '@mui/icons-material/AttachmentTwoTone';\nimport MenuRoundedIcon from '@mui/icons-material/MenuRounded';\nimport MoreHorizTwoToneIcon from '@mui/icons-material/MoreHorizTwoTone';\nimport ErrorTwoToneIcon from '@mui/icons-material/ErrorTwoTone';\nimport VideoCallTwoToneIcon from '@mui/icons-material/VideoCallTwoTone';\nimport CallTwoToneIcon from '@mui/icons-material/CallTwoTone';\nimport SendTwoToneIcon from '@mui/icons-material/SendTwoTone';\nimport MoodTwoToneIcon from '@mui/icons-material/MoodTwoTone';\nimport HighlightOffTwoToneIcon from '@mui/icons-material/HighlightOffTwoTone';\n\nconst avatarImage = require.context('assets/images/users', true);\n\n// drawer content element\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({\n    flexGrow: 1,\n    paddingLeft: open ? theme.spacing(3) : 0,\n    transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.shorter\n    }),\n    marginLeft: `-${drawerWidth}px`,\n    [theme.breakpoints.down('lg')]: {\n        paddingLeft: 0,\n        marginLeft: 0\n    },\n    ...(open && {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.shorter\n        }),\n        marginLeft: 0\n    })\n}));\n\n// ==============================|| APPLICATION CHAT ||============================== //\n\nconst ChatMainPage = () => {\n    const theme = useTheme();\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('lg'));\n\n    const [loading, setLoading] = useState(true);\n\n    const dispatch = useDispatch();\n    const scrollRef = useRef();\n\n    useLayoutEffect(() => {\n        if (scrollRef?.current) {\n            scrollRef.current.scrollIntoView();\n        }\n    });\n\n    // handle right sidebar dropdown menu\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClickSort = (event) => {\n        setAnchorEl(event?.currentTarget);\n    };\n\n    const handleCloseSort = () => {\n        setAnchorEl(null);\n    };\n\n    // set chat details page open when user is selected from sidebar\n    const [emailDetails, setEmailDetails] = React.useState(false);\n    const handleUserChange = () => {\n        setEmailDetails((prev) => !prev);\n    };\n\n    // toggle sidebar\n    const [openChatDrawer, setOpenChatDrawer] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpenChatDrawer((prevState) => !prevState);\n    };\n\n    // close sidebar when widow size below 'md' breakpoint\n    useEffect(() => {\n        setOpenChatDrawer(!matchDownSM);\n    }, [matchDownSM]);\n\n    const [user, setUser] = useState({});\n    const [data, setData] = React.useState([]);\n    const chatState = useSelector((state) => state.chat);\n\n    useEffect(() => {\n        setUser(chatState.user);\n    }, [chatState.user]);\n\n    useEffect(() => {\n        setData(chatState.chats);\n    }, [chatState.chats]);\n\n    useEffect(() => {\n        dispatch(getUser(1)).then(() => setLoading(false));\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        dispatch(getUserChats(user.name));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [user]);\n\n    // handle new message form\n    const [message, setMessage] = useState('');\n    const handleOnSend = () => {\n        const d = new Date();\n        setMessage('');\n        const newMessage = {\n            from: 'User1',\n            to: user.name,\n            text: message,\n            time: d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n        };\n        setData((prevState) => [...prevState, newMessage]);\n        dispatch(insertChat(newMessage));\n    };\n\n    const handleEnter = (event) => {\n        if (event?.key !== 'Enter') {\n            return;\n        }\n        handleOnSend();\n    };\n\n    // handle emoji\n    const onEmojiClick = (emojiObject) => {\n        setMessage(message + emojiObject.emoji);\n    };\n\n    const [anchorElEmoji, setAnchorElEmoji] = React.useState(); /** No single type can cater for all elements */\n    const handleOnEmojiButtonClick = (event) => {\n        setAnchorElEmoji(anchorElEmoji ? null : event?.currentTarget);\n    };\n\n    const emojiOpen = Boolean(anchorElEmoji);\n    const emojiId = emojiOpen ? 'simple-popper' : undefined;\n    const handleCloseEmoji = () => {\n        setAnchorElEmoji(null);\n    };\n\n    if (loading) return <Loader />;\n\n    return (\n        <Box sx={{ display: 'flex' }}>\n            <ChatDrawer openChatDrawer={openChatDrawer} handleDrawerOpen={handleDrawerOpen} setUser={setUser} />\n            <Main theme={theme} open={openChatDrawer}>\n                <Grid container spacing={gridSpacing}>\n                    <Grid item xs zeroMinWidth sx={{ display: emailDetails ? { xs: 'none', sm: 'flex' } : 'flex' }}>\n                        <MainCard\n                            sx={{\n                                bgcolor: theme.palette.mode === 'dark' ? 'dark.main' : 'grey.50'\n                            }}\n                        >\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={12}>\n                                    <Grid container alignItems=\"center\" spacing={0.5}>\n                                        <Grid item>\n                                            <IconButton onClick={handleDrawerOpen} size=\"large\" aria-label=\"click to menu collapse\">\n                                                <MenuRoundedIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item>\n                                            <Grid container spacing={2} alignItems=\"center\" sx={{ flexWrap: 'nowrap' }}>\n                                                <Grid item>\n                                                    <Avatar alt={user.name} src={user.avatar && avatarImage(`./${user.avatar}`)} />\n                                                </Grid>\n                                                <Grid item sm zeroMinWidth>\n                                                    <Grid container spacing={0} alignItems=\"center\">\n                                                        <Grid item xs={12}>\n                                                            <Typography variant=\"h4\" component=\"div\">\n                                                                {user.name}{' '}\n                                                                {user.online_status && <AvatarStatus status={user.online_status} />}\n                                                            </Typography>\n                                                        </Grid>\n                                                        <Grid item xs={12}>\n                                                            <Typography variant=\"subtitle2\">Last seen {user.lastMessage}</Typography>\n                                                        </Grid>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item sm zeroMinWidth />\n                                        <Grid item>\n                                            <IconButton size=\"large\" aria-label=\"phone call options\">\n                                                <CallTwoToneIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item>\n                                            <IconButton size=\"large\" aria-label=\"video call options\">\n                                                <VideoCallTwoToneIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item>\n                                            <IconButton onClick={handleUserChange} size=\"large\" aria-label=\"user information options\">\n                                                <ErrorTwoToneIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item>\n                                            <IconButton onClick={handleClickSort} size=\"large\" aria-label=\"more options\">\n                                                <MoreHorizTwoToneIcon />\n                                            </IconButton>\n                                            <Menu\n                                                id=\"simple-menu\"\n                                                anchorEl={anchorEl}\n                                                keepMounted\n                                                open={Boolean(anchorEl)}\n                                                onClose={handleCloseSort}\n                                                anchorOrigin={{\n                                                    vertical: 'bottom',\n                                                    horizontal: 'right'\n                                                }}\n                                                transformOrigin={{\n                                                    vertical: 'top',\n                                                    horizontal: 'right'\n                                                }}\n                                            >\n                                                <MenuItem onClick={handleCloseSort}>Name</MenuItem>\n                                                <MenuItem onClick={handleCloseSort}>Date</MenuItem>\n                                                <MenuItem onClick={handleCloseSort}>Ratting</MenuItem>\n                                                <MenuItem onClick={handleCloseSort}>Unread</MenuItem>\n                                            </Menu>\n                                        </Grid>\n                                    </Grid>\n                                    <Divider sx={{ mt: theme.spacing(2) }} />\n                                </Grid>\n                                <PerfectScrollbar\n                                    style={{ width: '100%', height: 'calc(100vh - 440px)', overflowX: 'hidden', minHeight: 525 }}\n                                >\n                                    <CardContent>\n                                        <ChartHistory\n                                            theme={theme}\n                                            handleUserDetails={handleUserChange}\n                                            handleDrawerOpen={handleDrawerOpen}\n                                            user={user}\n                                            data={data}\n                                        />\n                                        <span ref={scrollRef} />\n                                    </CardContent>\n                                </PerfectScrollbar>\n                                <Grid item xs={12}>\n                                    <Grid container spacing={1} alignItems=\"center\">\n                                        <Grid item>\n                                            <IconButton size=\"large\" aria-label=\"attachment file\">\n                                                <AttachmentTwoToneIcon />\n                                            </IconButton>\n                                            <IconButton\n                                                ref={anchorElEmoji}\n                                                aria-describedby={emojiId}\n                                                onClick={handleOnEmojiButtonClick}\n                                                size=\"large\"\n                                                aria-label=\"emoji\"\n                                            >\n                                                <MoodTwoToneIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item xs={12} sm zeroMinWidth>\n                                            <OutlinedInput\n                                                id=\"message-send\"\n                                                fullWidth\n                                                value={message}\n                                                onChange={(e) => setMessage(e.target.value)}\n                                                onKeyPress={handleEnter}\n                                                placeholder=\"Type a Message\"\n                                                endAdornment={\n                                                    <InputAdornment position=\"end\">\n                                                        <IconButton\n                                                            disableRipple\n                                                            color=\"primary\"\n                                                            onClick={handleOnSend}\n                                                            aria-label=\"send message\"\n                                                        >\n                                                            <SendTwoToneIcon />\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                }\n                                                aria-describedby=\"search-helper-text\"\n                                                inputProps={{ 'aria-label': 'weight' }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Popper\n                                id={emojiId}\n                                open={emojiOpen}\n                                anchorEl={anchorElEmoji}\n                                disablePortal\n                                style={{ zIndex: 1200 }}\n                                modifiers={[\n                                    {\n                                        name: 'offset',\n                                        options: {\n                                            offset: [-20, 20]\n                                        }\n                                    }\n                                ]}\n                            >\n                                <ClickAwayListener onClickAway={handleCloseEmoji}>\n                                    <MainCard elevation={8} content={false}>\n                                        <EmojiPicker onEmojiClick={onEmojiClick} defaultSkinTone={SkinTones.DARK} autoFocusSearch={false} />\n                                    </MainCard>\n                                </ClickAwayListener>\n                            </Popper>\n                        </MainCard>\n                    </Grid>\n                    {emailDetails && (\n                        <Grid item sx={{ margin: { xs: '0 auto', md: 'initial' } }}>\n                            <Box sx={{ display: { xs: 'block', sm: 'none', textAlign: 'right' } }}>\n                                <IconButton onClick={handleUserChange} sx={{ mb: -5 }} size=\"large\">\n                                    <HighlightOffTwoToneIcon />\n                                </IconButton>\n                            </Box>\n                            <UserDetails user={user} />\n                        </Grid>\n                    )}\n                </Grid>\n            </Main>\n        </Box>\n    );\n};\n\nexport default ChatMainPage;\n"],"names":["SubCard","React","_ref","ref","children","content","contentClass","darkTitle","secondary","sx","contentSX","title","others","theme","useTheme","_jsxs","Card","border","borderColor","palette","mode","dark","light","grey","boxShadow","_jsx","CardHeader","p","Typography","variant","action","Divider","opacity","CardContent","className","defaultProps","status","mr","FiberManualRecordIcon","cursor","color","success","verticalAlign","fontSize","warning","error","avatarImage","require","user","Grid","container","spacing","gridSpacing","width","maxWidth","item","xs","textAlign","background","main","primary","Avatar","alt","name","src","avatar","m","height","bgcolor","AvatarStatus","online_status","component","replaceAll","role","PinDropTwoToneIcon","PhoneTwoToneIcon","EmailTwoToneIcon","CardMedia","image","zeroMinWidth","Badge","overlap","badgeContent","anchorOrigin","vertical","horizontal","setUser","dispatch","useDispatch","data","setData","useState","users","useSelector","state","chat","useEffect","getUsers","List","map","Fragment","ListItemButton","onClick","ListItemAvatar","UserAvatar","ListItemText","alignItems","overflow","textOverflow","whiteSpace","display","lastMessage","unReadChatCount","Chip","label","px","id","handleDrawerOpen","openChatDrawer","useAuth","borderRadius","useConfig","matchDownLG","useMediaQuery","breakpoints","down","anchorEl","setAnchorEl","handleCloseRightMenu","setStatus","handleRightMenuItemClick","userStatus","drawerBG","Drawer","drawerWidth","flexShrink","zIndex","lg","boxSizing","position","anchor","open","ModalProps","keepMounted","onClose","MainCard","Box","pb","flexWrap","align","IconButton","event","currentTarget","size","ExpandMoreIcon","Menu","Boolean","transformOrigin","MenuItem","OutlinedInput","fullWidth","placeholder","startAdornment","InputAdornment","SearchTwoToneIcon","PerfectScrollbar","style","overflowX","minHeight","pt","UserList","history","index","from","float","ml","text","time","sm","Main","styled","shouldForwardProp","prop","flexGrow","paddingLeft","transition","transitions","create","easing","sharp","duration","shorter","marginLeft","easeOut","ChatMainPage","matchDownSM","loading","setLoading","scrollRef","useRef","useLayoutEffect","current","scrollIntoView","handleCloseSort","emailDetails","setEmailDetails","handleUserChange","prev","setOpenChatDrawer","prevState","chatState","chats","getUser","then","getUserChats","message","setMessage","handleOnSend","d","Date","newMessage","to","toLocaleTimeString","hour","minute","insertChat","anchorElEmoji","setAnchorElEmoji","emojiOpen","emojiId","undefined","Loader","ChatDrawer","MenuRoundedIcon","CallTwoToneIcon","VideoCallTwoToneIcon","ErrorTwoToneIcon","MoreHorizTwoToneIcon","mt","ChartHistory","handleUserDetails","AttachmentTwoToneIcon","MoodTwoToneIcon","value","onChange","e","target","onKeyPress","key","endAdornment","disableRipple","SendTwoToneIcon","inputProps","Popper","disablePortal","modifiers","options","offset","ClickAwayListener","onClickAway","handleCloseEmoji","elevation","EmojiPicker","onEmojiClick","emojiObject","emoji","defaultSkinTone","SkinTones","DARK","autoFocusSearch","margin","md","mb","HighlightOffTwoToneIcon","UserDetails"],"sourceRoot":""}